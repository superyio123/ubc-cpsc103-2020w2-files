{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": false
   },
   "outputs": [],
   "source": [
    "from cs103 import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "## How to Design Functions Worksheet\n",
    "\n",
    "### Problem 1\n",
    "For each of the functions described below, choose the best signature, and explain why you chose it. (We list the parameter and return types for each function. E.g., for the function `def string_fits(s: str, blank_size: int) -> bool` that determines whether the response to a question on a form will fit in the size of blank, we would list `str, int -> bool`.)\n",
    "\n",
    "**a.**  A function that multiplies a number by 4\n",
    "```python\n",
    "float -> 4 * float             float, float -> float\n",
    "\n",
    "number -> number                 float -> float\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Double click to edit this cell\n",
    "\n",
    "- Insert signature: `[ here ]`\n",
    "\n",
    "- Why is that the best signature?\n",
    " *Your solution goes here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "**b.** A function that determines if a number is greater than 6\n",
    "```python\n",
    "float -> str                     float -> bool\n",
    "\n",
    "float, float -> bool             float -> float\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Insert signature: `[ here ]`\n",
    "\n",
    "- Why is that the best signature?\n",
    " *Your solution goes here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "**c.** A function that returns a circle of a certain colour and radius\n",
    "```python\n",
    "int, str -> Image              str, int -> Image\n",
    "str -> Image                   int, str -> str\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Insert signature: `[ here ]`\n",
    "\n",
    "- Why is that the best signature?\n",
    " *Your solution goes here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "**d.**  A function that doubles a string (`'cat'` becomes `'catcat'`)\n",
    "```python\n",
    "str -> str, str              str, float -> str\n",
    "str -> str                   int -> str\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Insert signature: `[ here ]`\n",
    "\n",
    "- Why is that the best signature?\n",
    " *Your solution goes here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "### Problem 2\n",
    "For each of the problems above, indicate **either** the second-best response **or** that there is no good second-best response. Briefly explain your answer."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a. # Your solution goes here\n",
    "\n",
    "b.\n",
    "\n",
    "c.\n",
    "\n",
    "d."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "### Problem 3\n",
    "For parts a - d in question 1, write a clear and succinct purpose."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a. # Your solution goes here\n",
    "\n",
    "b.\n",
    "\n",
    "c.\n",
    "\n",
    "d."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "### Problem 4\n",
    "Match each function from question 1 with an appropriate stub body. You may need some stub bodies more than once and others not at all. (We show only function and parameter names, but you can look back to your choice of signature on problem 1. For example, for the `string_fits` function described in Q1, we would match `string_fits(s, blank_size)` with `return False`.)\n",
    "\n",
    "```python\n",
    "A def times_four(x):\n",
    "\n",
    "B def greater_than_6(x):\n",
    "\n",
    "C def make_circle(radius, colour):\n",
    "\n",
    "D def double(x):\n",
    "    \n",
    "    \n",
    "return False\n",
    "return radius\n",
    "return x\n",
    "return colour\n",
    "return square(1, 'solid', 'white'\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Double click to edit this cell\n",
    "\n",
    "|Stub |Solution|\n",
    "|:---:|:---|\n",
    "|return False     |  # Matches with ` [ letter here] `|\n",
    "|return radius    |  # Matches with ` [ letter here] `|\n",
    "|return x         |  # Matches with ` [ letter here] `|\n",
    "|return colour    |  # Matches with ` [ letter here] `|\n",
    "|return square(1, 'solid', 'white') | # Matches with ` [ letter here] `|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "### Problem 5\n",
    "If you were designing a function to return a different image, could its stub return the same value as the stub for `make_circle`? Why or why not?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*your solution goes here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "### Problem 6\n",
    "Suppose you are designing a function that takes two images and determines if the first is larger than the second. You get to decide what larger means – area, height, or both height and width. For each of the possible definitions for “larger image”, write a full set of examples/tests for the function `larger_image`. We have provided you with a signature/purpose/stub, although the final, correct purpose would need to be expanded to include what *larger* means in each case.\n",
    "\n",
    "```python\n",
    "@typecheck\n",
    "def larger_image(i1: Image, i2: Image) -> bool:\n",
    "    \"\"\"\n",
    "    return True if the first image is larger than the second,\n",
    "    where larger means ...\n",
    "    \"\"\"\n",
    "    return False #stub\n",
    "```\n",
    "**Note**: no need to run your tests for this problem because this function is not fully finished"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*your solution goes here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "**a.** Write a full set of examples/tests for the function `larger_image` assuming that *larger means greater in area*. For simplicity, no matter what the shape is, we take its area to be its overall height times its overall width. For example, a circle of radius 5 will have an area of 100, which is 5+5 (height) times 5+5 (width)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*your solution goes here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "**b.** Write a full set of examples/tests for the function `larger_image` assuming that *larger means taller*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*your solution goes here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "### Problem 7\n",
    "Complete the function body of each of the two versions of larger_image. We have provided two versions of the partially completed function for you. (If you get stuck, go back and put more detail into your examples from the previous problem. Also, remember to look up the Image functions described on the *Language page in Canvas*.)\n",
    "\n",
    "**A.**\n",
    "```python\n",
    "@typecheck\n",
    "def larger_image(i1: Image, i2: Image) -> bool:\n",
    "    \"\"\"\n",
    "    return True if i1 has larger area than i2\n",
    "    \"\"\"\n",
    "    # return False #stub\n",
    "    # return ...(i1, i2) #template\n",
    "```\n",
    "    \n",
    " **B.**\n",
    "```python \n",
    "@typecheck\n",
    "def larger_image(i1: Image, i2: Image) -> bool:\n",
    "    \"\"\"\n",
    "    return True if i1 is taller than i2\n",
    "    \"\"\"\n",
    "    # return False #stub\n",
    "    # return ...(i1, i2) #template\n",
    " ```\n",
    " \n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This cell can be run \n",
    "# your solution for version A goes here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This cell can be run  \n",
    "# your solution for version B goes here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "### Problem 8\n",
    "Design a function that determines if a string starts with the letter d. Be sure to follow all steps of the recipe: stub, including signature, and purpose, examples/tests, template and the function body. Think carefully about any special issues particular input strings may cause!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This cell can be run \n",
    "# your solution goes here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "### Problem 9\n",
    "Imagine you have been approached by a client to design a complex function. As you and your teammates start working through the design, you find that the specifications for the function are ambiguous (like the definition of larger in questions 5 and 6). How should you decide what behaviour your function should have?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*your solution goes here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "### Problem 10\n",
    "In each of the following function designs, identify and correct the piece of the function design that is inconsistent with the rest. Comment out the piece of code that is incorrect and correct it in the next line (See example bellow).\n",
    "\n",
    "```python\n",
    "\n",
    "@typecheck\n",
    "def divisible_by_3(n: int) -> bool:\n",
    "    \"\"\"\n",
    "    return True if n is divisible by 3, False otherwise\n",
    "    \"\"\"\n",
    "     \n",
    "    #return False #stub\n",
    "    # return ...(n) #template\n",
    "    return n % 3 == 0\n",
    "\n",
    "start_testing()\n",
    "expect(divisible_by_3(0), 'True')\n",
    "expect(divisible_by_3(21), 'True')\n",
    "expect(divisible_by_3(22), 'False')\n",
    "expect(divisible_by_3(-6), 'True')\n",
    "summary()\n",
    "\n",
    "@typecheck\n",
    "def same_first_and_last_letter(s: str) -> bool:\n",
    "    \"\"\"\n",
    "    return True if the first and last letter of s are the same,\n",
    "    False otherwise\n",
    "    \"\"\"\n",
    "    #return s #stub\n",
    "    #return ...(s) #template\n",
    "    if s == '':\n",
    "        return False\n",
    "    else:\n",
    "        return s[0] == s[–1]\n",
    " \n",
    "    \n",
    "start_testing()\n",
    "expect(same_first_and_last_letter(''), False)\n",
    "expect(same_first_and_last_letter('a'), True)\n",
    "expect(same_first_and_last_letter('hello'), False)\n",
    "expect(same_first_and_last_letter('mom'), True)\n",
    "summary()\n",
    "\n",
    "```\n",
    "\n",
    "Example: \n",
    "```\n",
    "Line 1:   # this is the piece of code [insert code here] that is incorrect \n",
    "Line 2:   replacing that piece with the correct code \n",
    "```\n",
    "**Note:** The functions in this cell are for reference only. Please edit the cell below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "\n",
    "\n",
    "\n",
    "@typecheck\n",
    "def divisible_by_3(n: int) -> bool:\n",
    "    \"\"\"\n",
    "    return True if n is divisible by 3, False otherwise\n",
    "    \"\"\"\n",
    "     \n",
    "    #return False #stub\n",
    "    # return ...(n) #template\n",
    "    return n % 3 == 0\n",
    "\n",
    "start_testing()\n",
    "expect(divisible_by_3(0), 'True')\n",
    "expect(divisible_by_3(21), 'True')\n",
    "expect(divisible_by_3(22), 'False')\n",
    "expect(divisible_by_3(-6), 'True')\n",
    "summary()\n",
    "\n",
    "@typecheck\n",
    "def same_first_and_last_letter(s: str) -> bool:\n",
    "    \"\"\"\n",
    "    return True if the first and last letter of s are the same,\n",
    "    False otherwise\n",
    "    \"\"\"\n",
    "    #return s #stub\n",
    "    #return ...(s) #template\n",
    "    if s == '':\n",
    "        return False\n",
    "    else:\n",
    "        return s[0] == s[–1]\n",
    " \n",
    "    \n",
    "start_testing()\n",
    "expect(same_first_and_last_letter(''), False)\n",
    "expect(same_first_and_last_letter('a'), True)\n",
    "expect(same_first_and_last_letter('hello'), False)\n",
    "expect(same_first_and_last_letter('mom'), True)\n",
    "summary()\n",
    "\n",
    "\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "### Problem 11 \n",
    "You have been focusing on designing functions, but as programmers we spend most of our time **using** or **calling** functions that other programmers designed (e.g., the built-in len function).\n",
    "\n",
    "**a.** Which parts of your design will other programmers need to look at in order to use your functions?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*your solution goes here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "**b.** Which parts should they be able to ignore?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*your solution goes here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "**c.** In today's exercises, did you give other programmers enough\n",
    "information to be able to use your functions?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*your solution goes here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "### Problem 12\n",
    "How are you using the previous steps of the How to Design Functions recipe to help you complete the current step? For example, how are you using the stub, including signature and purpose, to help write examples, or using the stub, including signature and purpose, examples and template to help write the function definition."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*your solution goes here*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": false
   },
   "outputs": [],
   "source": [
    "# NOTE: You should not be able to edit this cell. Just run it to start the process of submiting your code.\n",
    "from cs103 import submit\n",
    "\n",
    "COURSE = 58946\n",
    "ASSIGNMENT = 750756\n",
    "\n",
    "submit(COURSE, ASSIGNMENT)\n",
    "\n",
    "# If something has gone wrong and you still are not able to submit by running the code above, SUBMIT ANYWAY \n",
    "# by downloading your files and uploading them to Canvas. You can learn how on the page \n",
    "# \"How to submit your Jupyter notebook\" on our Canvas site."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
